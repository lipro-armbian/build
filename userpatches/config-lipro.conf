# Read build script documentation https://docs.armbian.com/Developer-Guide_Build-Options/
# for detailed explanation of these options and for additional options not listed here

KERNEL_ONLY=""				# leave empty to select each time, set to "yes" or "no" to skip dialog prompt
KERNEL_CONFIGURE=""			# leave empty to select each time, set to "yes" or "no" to skip dialog prompt
KERNEL_KEEP_CONFIG="yes"		# use kernel config file from previous compilation for the same branch, device family and version
CLEAN_LEVEL="make,debs,oldcache"	# comma-separated list of clean targets:
					# "make" = execute make clean for selected kernel and u-boot sources,
					# "images" = delete output/images (complete OS images),
					# "debs" = delete packages in "./output/debs" for current branch and family,
					# "alldebs" = delete all packages in "./output/debs",
					# "cache" = delete cache/rootfs (rootfs cache),
					# "oldcache" = remove old cache/rootfs except for the newest 8 files,
					# "sources" = delete cache/sources (all downloaded sources),
					# "extras" = delete additional packages for current release in output/debs/extra

# distribution
BUILD_DESKTOP=""			# leave empty to select each time, set to "yes" or "no" to skip dialog prompt
BUILD_MINIMAL="no"			# never build bare CLI images, be compatible with BUILD_DESKTOP="yes"
BSPFREEZE="yes"				# freeze (from update) armbian packages when building images (u-boot, kernel, dtb)
INSTALL_HEADERS="no"			# install kernel headers package
DEST_LANG="en_US.UTF-8"			# language for target (ex: de_DE.UTF-8|en_US.UTF-8), only used for non cached (created) rootfs

# advanced
USE_CCACHE="yes"			# use fast C/C++ compiler cache for compiling
PRIVATE_CCACHE="yes"			# private ccache directory to avoid permission issues when using build script with "sudo"
EXTERNAL_NEW="prebuilt"			# compile and install or install prebuilt additional packages
INSTALL_HEADERS=""			# install kernel headers package
LIB_TAG="lipro/devel"			# change to LiPro to use any branch currently available
PROGRESS_DISPLAY="plain"		# way to display output of verbose processes - compilation, packaging, debootstrap
PROGRESS_LOG_TO_FILE="yes"		# force duplicate output, affected by previous option, to log files output/debug/*.log
USE_TORRENT="no"			# use torrent network for faster toolchain and cache download
DOWNLOAD_MIRROR=""			# set to "china" to use mirrors.tuna.tsinghua.edu.cn
# FORCE_USE_RAMDISK="no"		# do not using tmpfs in new debootstrap and image creation process
# ROOT_FS_CREATE_ONLY="force"		# skip rootfs download and create locally
ROOTFS_TYPE="ext4"			# create image with different root filesystems instead of default ext4, choice one of:
					# ext4|f2fs|btrfs|nfs|fel - requires setting FIXED_IMAGE_SIZE to something smaller than
					# the size of your SD card for F2FS.
# FIXED_IMAGE_SIZE=2048			# create image file of 2048 MiB (megabytes) instead of minimal
CUSTOMIZE_IMAGE_BINDRW="yes"		# mount image for customization as read/write overlay binding (default is read-only)
COMPRESS_OUTPUTIMAGE="sha,gz"		# comma-separated list of create artefacts for redistribution:
					# "sha" = generate SHA256 hash for image,
					# "gpg" = sign image using gpg,
					# "7z" = compress image, hash and signature to 7z archive,
					# "gz" = compress image only using gz format,
					# "yes" = compatibility shorcut for sha,gpg,7z.
CARD_DEVICE=""				# device name /dev/sdx of your SD card to burn directly to the card when done

# vendor specifics
MAINTAINER="Stephan Linz"		# deb signature
MAINTAINERMAIL="linz@li-pro.net"	# deb signature
SUBREVISION=".$(date +'%y%m%d%j')~lpn"	# expand deb revision
ROOTPWD="lpn1234"			# Must be changed @first login
